#!/bin/bash

default_track="/usr/local/share/alerty/alarm.mp3"
default_message="BEEP BEEP BEEP MF"

hours=0
minutes=0
seconds=0
track=""
message="$default_message"
pid_file="/tmp/alarm_pid"  

show_creds() {
    cat << "EOF"
 ________  ___       _______   ________  _________    ___    ___ 
|\   __  \|\  \     |\  ___ \ |\   __  \|\___   ___\ |\  \  /  /|
\ \  \|\  \ \  \    \ \   __/|\ \  \|\  \|___ \  \_| \ \  \/  / /
 \ \   __  \ \  \    \ \  \_|/_\ \   _  _\   \ \  \   \ \    / / 
  \ \  \ \  \ \  \____\ \  \_|\ \ \  \\  \|   \ \  \   \/  /  /  
   \ \__\ \__\ \_______\ \_______\ \__\\ _\    \ \__\__/  / /    
    \|__|\|__|\|_______|\|_______|\|__|\|__|    \|__|\___/ /     
                                                    \|___|/      
                                                                 
               An Abomination by sinhSlumbering
EOF
    exit 0
}
usage() {
    echo "Usage: alert [OPTIONS]"
    echo "Set a timed alarm that plays a sound and sends a notification after the specified time."
    echo ""
    echo "Options:"
    echo "  -h <hours>            Set hours for the alarm timer."
    echo "  -m <minutes>          Set minutes for the alarm timer."
    echo "  -s <seconds>          Set seconds for the alarm timer."
    echo "  -f <track>            Specify a custom alarm sound file."
    echo "  -df <track>           Set a default alarm sound file (used if -f is not specified)."
    echo "  -sm, --set-message    Set a custom notification message (default: 'BEEP BEEP BEEP MF')."
    echo "  --status              Check if an alarm is running."
    echo "  --stop                Stop the currently running alarm."
    echo "  --help                Display this help message."
    echo ""
    echo "Examples:"
    echo "  alert -h 1 -m 30                    Set an alarm for 1 hour and 30 minutes with the default sound."
    echo "  alert -s 45 -f alert.mp3            Set an alarm for 45 seconds with a custom sound."
    echo "  alert -s 10 -sm 'Time's up!'        Set a 10-second alarm with a custom notification message."
    echo "  alert --status                      Check if an alarm is currently running."
    echo "  alert --stop                        Stop the active alarm."
    exit 0
}

while [[ $# -gt 0 ]]; do
    case $1 in
        -h) hours="$2"; shift 2 ;;
        -m) minutes="$2"; shift 2 ;;
        -s) seconds="$2"; shift 2 ;;
        -f) track="$2"; shift 2 ;;
        -df) default_track="$2"; shift 2 ;;
        -sm|--set-message) message="$2"; shift 2 ;;
        --status) status=1; shift ;;
        --stop) stop=1; shift ;;
        --creds) show_creds;;
        --help) usage ;;  
        *) usage ;;
    esac
done

total_seconds=$(( (hours * 3600) + (minutes * 60) + seconds ))

if [ "$status" ]; then
    if [ -f "$pid_file" ]; then
        pid=$(cat "$pid_file")
        if ps -p "$pid" > /dev/null; then
            echo "Alarm is running with PID: $pid"
        else
            echo "No active alarm found."
        fi
    else
        echo "No alarm process found."
    fi
    exit 0
fi

if [ "$stop" ]; then
    if [ -f "$pid_file" ]; then
        pid=$(cat "$pid_file")
        if kill "$pid" > /dev/null 2>&1; then
            echo "Alarm stopped."
            rm -f "$pid_file"
        else
            echo "No active alarm to stop."
        fi
    else
        echo "No alarm process found."
    fi
    exit 0
fi

if [ "$total_seconds" -le 0 ]; then
    echo "Please specify a valid time duration."
    usage
fi

alarm_track="${track:-$default_track}"

{
    echo "Sleeping for $hours hours, $minutes minutes, $seconds seconds..."
    sleep "$total_seconds"
    echo "Playing alarm: $alarm_track"
    ffplay -nodisp -autoexit "$alarm_track" &
    if command -v notify-send &> /dev/null; then
        notify-send "Alerty" "$message" -i dialog-information
    fi
} &

echo $! > "$pid_file"
echo "Alarm set with PID: $!"

disown

